import tkinter as tk
from tkinter import ttk, messagebox
import os
import threading
import time

# Personal DNS Changer Tool
# Coded by darkboss1bd
# Telegram: https://t.me/darkvaiadmin
# Website: https://serialkey.top/

# Default DNS Servers
DNS_OPTIONS = {
    "Google DNS": ["8.8.8.8", "8.8.4.4"],
    "Cloudflare DNS": ["1.1.1.1", "1.0.0.1"],
    "OpenDNS": ["208.67.222.222", "208.67.220.220"],
    "Quad9 DNS": ["9.9.9.9", "149.112.112.112"],
    "Custom DNS": []
}

# Hacker Animation (ASCII Style)
HACK_ANIMATION = [
    "█▓▒░ H4CK1NG TH3 N3TW0RK ░▒▓█",
    "░█▓▒ C0NN3CT1NG T0 DNS... ▒▓█░",
    "▒░█▓ R3W4R1T1NG R3S0LV.CONF ▓█░▒",
    "▓▒░█ F1R3W4LL BYP4SS1NG... ░█▓▒",
    "█▓▒░ D0N3! DNSS CH4NG3D! ░▒▓█"
]

# Banner
BANNER = r"""
╔══════════════════════════════════════╗
║  PERSONAL DNS CHANGER TOOL           ║
║  CODED BY: darkboss1bd                ║
║  TELEGRAM: @darkvaiadmin              ║
║  WEBSITE: serialkey.top               ║
╚══════════════════════════════════════╝
"""

# Function to change DNS
def change_dns(primary, secondary=None):
    def run():
        try:
            with open("/etc/resolv.conf", "w") as f:
                f.write("# Generated by Personal DNS Changer Tool\n")
                f.write(f"nameserver {primary}\n")
                if secondary:
                    f.write(f"nameserver {secondary}\n")
            log("✅ DNS successfully changed!")
            log(f"🔹 Primary: {primary}")
            if secondary:
                log(f"🔹 Secondary: {secondary}")
        except PermissionError:
            log("❌ Root permission required! Run with 'sudo python3 dns_changer.py'")
        except Exception as e:
            log(f"❌ Error: {str(e)}")

    threading.Thread(target=run, daemon=True).start()

# GUI Application
class DNSChangerApp:
    def __init__(self, root):
        self.root = root
        self.root.title("🔐 Personal DNS Changer - darkboss1bd")
        self.root.geometry("600x500")
        self.root.resizable(False, False)
        self.root.configure(bg="#0e0e0e")

        # Hacker Theme
        self.text_color = "#00ff00"
        self.bg_color = "#0e0e0e"
        self.button_color = "#00cc00"

        self.create_widgets()

    def create_widgets(self):
        # Banner
        banner_label = tk.Label(
            self.root,
            text=BANNER,
            font=("Courier", 10, "bold"),
            fg=self.text_color,
            bg=self.bg_color,
            justify="left"
        )
        banner_label.pack(pady=10)

        # Animation Label
        self.anim_label = tk.Label(
            self.root,
            text="",
            font=("Courier", 10, "bold"),
            fg="red",
            bg=self.bg_color
        )
        self.anim_label.pack(pady=5)
        self.animate_text()

        # DNS Selection
        tk.Label(
            self.root,
            text="🔹 Select DNS Server:",
            fg=self.text_color,
            bg=self.bg_color,
            font=("Helvetica", 10)
        ).pack(pady=5)

        self.dns_var = tk.StringVar(value="Google DNS")
        self.dns_combo = ttk.Combobox(
            self.root,
            values=list(DNS_OPTIONS.keys()),
            textvariable=self.dns_var,
            state="readonly",
            width=30
        )
        self.dns_combo.pack(pady=5)
        self.dns_combo.bind("<<ComboboxSelected>>", self.on_dns_select)

        # Custom DNS Inputs
        self.custom_frame = tk.Frame(self.root, bg=self.bg_color)
        self.custom_frame.pack(pady=10, fill="x", padx=50)

        tk.Label(self.custom_frame, text="Primary DNS:", fg=self.text_color, bg=self.bg_color).grid(row=0, column=0, sticky="w")
        self.primary_entry = tk.Entry(self.custom_frame, width=20, bg="black", fg="cyan", insertbackground="cyan")
        self.primary_entry.grid(row=0, column=1, padx=5)

        tk.Label(self.custom_frame, text="Secondary DNS:", fg=self.text_color, bg=self.bg_color).grid(row=1, column=0, sticky="w")
        self.secondary_entry = tk.Entry(self.custom_frame, width=20, bg="black", fg="cyan", insertbackground="cyan")
        self.secondary_entry.grid(row=1, column=1, padx=5)

        self.on_dns_select()

        # Buttons
        btn_frame = tk.Frame(self.root, bg=self.bg_color)
        btn_frame.pack(pady=20)

        self.apply_btn = tk.Button(
            btn_frame,
            text="🚀 Apply DNS",
            command=self.apply_dns,
            bg=self.button_color,
            fg="black",
            font=("Helvetica", 10, "bold"),
            width=12
        )
        self.apply_btn.grid(row=0, column=0, padx=10)

        self.reset_btn = tk.Button(
            btn_frame,
            text="🔄 Reset DNS",
            command=self.reset_dns,
            bg="orange",
            fg="black",
            font=("Helvetica", 10, "bold"),
            width=12
        )
        self.reset_btn.grid(row=0, column=1, padx=10)

        # Log Box
        tk.Label(
            self.root,
            text="📜 Log:",
            fg=self.text_color,
            bg=self.bg_color,
            font=("Helvetica", 10)
        ).pack(pady=5)

        self.log_text = tk.Text(
            self.root,
            height=8,
            width=70,
            bg="black",
            fg="#00ff00",
            font=("Courier", 9),
            state="normal"
        )
        self.log_text.pack(pady=5)

        self.log("🟢 Tool started...")

    def animate_text(self):
        def animate():
            for line in HACK_ANIMATION:
                time.sleep(0.8)
                self.anim_label.config(text=line)
        threading.Thread(target=animate, daemon=True).start()

    def on_dns_select(self, event=None):
        selected = self.dns_var.get()
        self.primary_entry.delete(0, tk.END)
        self.secondary_entry.delete(0, tk.END)

        if selected == "Custom DNS":
            self.primary_entry.config(state="normal")
            self.secondary_entry.config(state="normal")
        else:
            dns = DNS_OPTIONS[selected]
            self.primary_entry.insert(0, dns[0])
            if len(dns) > 1:
                self.secondary_entry.insert(0, dns[1])
            self.primary_entry.config(state="disabled")
            self.secondary_entry.config(state="disabled")

    def log(self, message):
        self.log_text.insert(tk.END, f"[{time.strftime('%H:%M:%S')}] {message}\n")
        self.log_text.see(tk.END)

    def apply_dns(self):
        primary = self.primary_entry.get().strip()
        secondary = self.secondary_entry.get().strip()

        if not primary:
            messagebox.showwarning("⚠️ Warning", "Please enter a Primary DNS address!")
            return

        self.log(f"🔄 Changing DNS: {primary} | {secondary or 'N/A'}")
        change_dns(primary, secondary)

    def reset_dns(self):
        def run():
            try:
                with open("/etc/resolv.conf", "w") as f:
                    f.write("# Reset to default\n")
                    f.write("nameserver 127.0.0.53\n")
                self.log("🔄 DNS reset to default.")
            except Exception as e:
                self.log(f"❌ Reset failed: {e}")

        threading.Thread(target=run, daemon=True).start()


# Main
if __name__ == "__main__":
    root = tk.Tk()
    app = DNSChangerApp(root)
    root.mainloop()